#!/bin/sh
# vim: set ts=4 sw=4 sts=4 et :
### prepare-chroot-base : Create a (any) chroot instance of NixOS
### May be called from ./scripts/01_install_core.sh or ./prepare-chroot-builder
echo "--> NixOS prepare-chroot-base"

SELFDIR=$(dirname $0)
INSTALLDIR="$1"
DISTRO="$2"  # aka elsewhere as $DIST

# BOOTSTRAP_DIR="${CACHEDIR}/bootstrap"
# PACMAN_MIRROR="${PACMAN_MIRROR:-mirror.rackspace.com}"

# PACMAN_CACHE_DIR="${CACHEDIR}/pacman_cache"
# export PACMAN_CACHE_DIR

set -e
[ "$VERBOSE" -ge 2 -o "$DEBUG" -gt 0 ] && set -x

# if ! [ -f "${BOOTSTRAP_DIR}/.extracted" -a -d "${CACHEDIR}/pacman_cache" ]; then
#     # XXX: Potential infinite loop in certain error conditions?
#     echo "  --> Bootstrap chroot environment may not exist, calling 00_prepare.sh..."
#     "${SCRIPTSDIR}/00_prepare.sh"
# fi

# # XXX: Also run if .extracted is newer than .prepared_base ??
# if [ -f "${INSTALLDIR}/.prepared_base" ]; then
#     echo "  --> NB: INSTALLDIR '${INSTALLDIR}' already appears to have an environment; will leave as-is!"
#     exit 0
# fi

mkdir -p "${CACHEDIR}/mnt/nixos-iso"
mountpoint "${CACHEDIR}/mnt/nixos-iso" && umount "${CACHEDIR}/mnt/nixos-iso"
mount -t iso9660 -o loop "${CACHEDIR}/nixos.iso" "${CACHEDIR}/mnt/nixos-iso"

echo "--> copying ISO contents to ${CACHEDIR}/nixos-chroot"
rsync -a "${CACHEDIR}/mnt/nixos-iso/." "${CACHEDIR}/nixos-chroot"

# following based on https://nixos.org/wiki/How_to_install_NixOS_from_Linux
echo "--> unsquashing nix store"
mkdir -p "${CACHEDIR}/nixos-chroot/nix"
unsquashfs -d "${CACHEDIR}/nixos-chroot/nix/store" "${CACHEDIR}/nixos-chroot/nix-store.squashfs"
rm -f "${CACHEDIR}/nixos-chroot/nix-store.squashfs"

echo "--> entering nix root"
pushd "${CACHEDIR}/nixos-chroot"

echo "--> creating nix root directories"
mkdir -p etc dev proc sys home usr/local

echo "--> patching init to start bootstrap script instead of systemd"
INIT=$(find . -type f -path '*nixos*/init')
BASH=$(find . -type f -path '*/bin/bash' | tail -n 1)
cp $INIT ./tmp/init
cp $SELFDIR/bootstrap-nixos.sh ./tmp
chmod +x ./tmp/bootstrap-nixos.sh
sed -i "s,exec /.*$,exec $BASH /tmp/bootstrap-nixos.sh," ./tmp/init
sed -i "s,^PATH=.*$,," ./tmp/init

echo "--> chroot and run install init"
chroot . /usr/bin/env -i $BASH /tmp/init

echo "--> leaving nix root"
popd

echo "--> copy nixos-chroot to ${INSTALLDIR}"
rsync -a "${CACHEDIR}/nixos-chroot/." "${INSTALLDIR}"


# echo "  --> Binding INSTALLDIR '${INSTALLDIR}' to bootstrap environment..."
# mount --bind "$INSTALLDIR" "${BOOTSTRAP_DIR}/mnt"

# # TODO: This doesn't seem super elegant
# echo "  --> Setting pacman mirror as '$PACMAN_MIRROR'..."
# sed "s|#Server = http://${PACMAN_MIRROR}/|Server = http://${PACMAN_MIRROR}/|" \
#     < "${CACHEDIR}/bootstrap/etc/pacman.d/mirrorlist.dist" \
#     > "${CACHEDIR}/bootstrap/etc/pacman.d/mirrorlist"
# cp /etc/resolv.conf "${BOOTSTRAP_DIR}/etc/"



# echo "  --> Initializing pacman keychain..."
# "${SCRIPTSDIR}/arch-chroot-lite" "$BOOTSTRAP_DIR" /bin/pacman-key --init
# "${SCRIPTSDIR}/arch-chroot-lite" "$BOOTSTRAP_DIR" /bin/pacman-key --populate




# echo "  --> Installing core pacman packages..."
# export PACMAN_CACHE_MOUNT_DIR="${BOOTSTRAP_DIR}/mnt/var/cache/pacman"
# "${SCRIPTSDIR}/arch-chroot-lite" "$BOOTSTRAP_DIR" /bin/sh -c \
#     "http_proxy='${REPO_PROXY}' pacstrap /mnt base"
# unset PACMAN_CACHE_MOUNT_DIR

# echo "  --> Removing non-required linux kernel (can be added manually through a package)..."
# "${SCRIPTSDIR}/arch-chroot-lite" "$INSTALLDIR" /bin/pacman --noconfirm -Rsc linux

# echo "  --> Unbinding INSTALLDIR..."
# umount ${BOOTSTRAP_DIR}/mnt

# touch "${INSTALLDIR}/.prepared_base"
